package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	threads := 2
	// wait group to manage main engine threads
	wgThreads := new(sync.WaitGroup)
	wgThreads.Add(threads)
	for i := 0; i < threads; i++ {
		fmt.Println(threads, i)
		go goabeThread(wgThreads, fmt.Sprintf("thread %03d", i), (i+1)*2, (i+1)*100)
	}
	wgThreads.Wait()
}

func goabeThread(wg *sync.WaitGroup, name string, actions int, waitTimeMs int) {
	defer wg.Done()
	for i := 0; i < actions; i++ {
		fmt.Println(name, i)
		time.Sleep(time.Millisecond * time.Duration(waitTimeMs))
	}
}
